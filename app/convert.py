import os, math
import argparse
from PIL import Image
from datetime import datetime



def getBinaryData(filename):

    binary_values = []

    with open(filename, 'rb') as fileobject:

        # read file byte by byte
        data = fileobject.read(1)

        while data != b'':
            binary_values.append(ord(data))
            data = fileobject.read(1)
    return binary_values


def save_file(filename, data, size, image_type):

    # if size[0]>256 and size[1]>256 and size[0]<1000 and size[1]<1000:
    try:
        image = Image.new(image_type, size)

        image.putdata(data)


        dirname     = os.path.dirname(filename)
        name, _     = os.path.splitext(filename)
        name        = os.path.basename(name)
        # imagename   = dirname + os.sep + image_type + os.sep + name + '_'+image_type+ '.png'

        now = datetime.now()

        current_time = now.strftime("%H-%M-%S")
        saved_image_path = os.path.join(os.path.dirname(__file__)) + '\\computed\\'+current_time+'.jpg'
        
        
        image.save(saved_image_path)

        return saved_image_path
    except Exception as err:
        return ''
        print(err)


def get_size(data_length):
    size = data_length

    if (size < 10240):
        width = 32
    elif (10240 <= size <= 10240 * 3):
        width = 64
    elif (10240 * 3 <= size <= 10240 * 6):
        width = 128
    elif (10240 * 6 <= size <= 10240 * 10):
        width = 256
    elif (10240 * 10 <= size <= 10240 * 20):
        width = 384
    elif (10240 * 20 <= size <= 10240 * 50):
        width = 512
    elif (10240 * 50 <= size <= 10240 * 100):
        width = 768
    else:
        width = 1024

    height = int(size / width) + 1

    return (width, height)

def convertToImage(file_path):

    greyscale_data  = getBinaryData(file_path)
    size            = get_size(len(greyscale_data))
    return save_file(file_path, greyscale_data, size, 'L')
  
